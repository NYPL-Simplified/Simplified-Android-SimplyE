buildscript {
  if ("$gradle.gradleVersion" != "6.3") {
    throw new GradleException("Gradle version 6.3 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.3.72"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.0.1"
    classpath "com.nabilhachicha:android-native-dependencies:0.1.2"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.16.0"
    classpath "digital.wup:android-maven-publish:3.6.3"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:3.6.3'
    classpath 'com.google.gms:google-services:4.3.3'
    classpath 'com.google.firebase:firebase-crashlytics-gradle:2.2.0'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.22.0"
  id "com.vanniktech.android.junit.jacoco" version "0.16.0"
  id "digital.wup.android-maven-publish" version "3.6.3"
  id "io.codearte.nexus-staging" version "0.21.2"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "28.0.3"
  androidCompileSDKVersion = 29
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 29

  if (!project.hasProperty("nexusUsername")) {
    logger.warn("No nexusUsername property specified: Using an empty value")
    nexusUsername = ""
  }
  if (!project.hasProperty("nexusPassword")) {
    logger.warn("No nexusPassword property specified: Using an empty value")
    nexusPassword = ""
  }

  nyplFindawayVersion = "5.0.0"
  simplifiedVersion = "6.0.0-SNAPSHOT"
  firebaseVersion = "17.2.2"
}

subprojects {
  // Force version 1.0.2 of appcompat. A bug in 1.1.0 causes a crash on API 21.
  //
  // https://issuetracker.google.com/issues/141132133#comment42
  //
  // TODO: Remove once appcompat:1.2.0 is available.
  configurations.all {
    resolutionStrategy.force 'androidx.appcompat:appcompat:1.0.2'
  }

  //
  // We currently have transitive dependencies that specify dependencies on newer versions
  // of SLF4J. These are subtly incompatible with Logback-Android, and it will be a while before
  // new versions appear of both artifacts. Remove this when both are updated!
  //
  configurations.all {
    resolutionStrategy.force libraries.slf4j
  }
}

ext.libraries = [
  firebaseAnalytics                  : "com.google.firebase:firebase-analytics:${firebaseVersion}",
  firebaseCrashlytics                : "com.google.firebase:firebase-crashlytics:17.1.1",
  googleAutoValue                    : "com.google.auto.value:auto-value:1.5",
  nyplDRMAdobeProvider               : "org.librarysimplified.drm.adobe:org.librarysimplified.drm.adobe.provider:1.1.27",
  nyplDRMCore                        : "org.librarysimplified.drm:org.librarysimplified.drm.core:1.1.2",
  nyplFindaway                       : "org.librarysimplified.audiobook.audioengine:org.librarysimplified.audiobook.audioengine.core:${nyplFindawayVersion}",
  simplifiedAccountSourceNYPLRegistry: "org.librarysimplified:org.librarysimplified.accounts.source.nyplregistry:${simplifiedVersion}",
  simplifiedAnalyticsCirculation     : "org.librarysimplified:org.librarysimplified.analytics.circulation:${simplifiedVersion}",
  simplifiedMain                     : "org.librarysimplified:org.librarysimplified.main:${simplifiedVersion}",
  simplifiedMigrationFrom3Master     : "org.librarysimplified:org.librarysimplified.migration.from3master:${simplifiedVersion}",
  simplifiedAudioBooksOverdrive      : "org.librarysimplified.audiobook.overdrive:org.librarysimplified.audiobook.overdrive.main:1.0.0",
  slf4j                              : "org.slf4j:slf4j-api:1.7.25",
]

apply plugin: "io.codearte.nexus-staging"
apply plugin: "com.vanniktech.android.junit.jacoco"

nexusStaging {
  packageGroup = "org.librarysimplified"
  numberOfRetries = 256
  delayBetweenRetriesInMillis = 2000
}

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

task preFlightChecks {
  logger.info("running pre-flight checks")

  def requiredFiles = [
    "app/google-services.json",
    "app/keystore.jks",
    "app/src/main/assets/cardcreator.conf",
    "app/src/main/assets/overdrive.json",
    "app/src/main/assets/ReaderClientCert.sig",
    "app/src/main/resources/org/nypl/simplified/simplye/feedbooks.conf",
  ]

  def missingFiles = []
  for (requiredFile in requiredFiles) {
    logger.info("Checking ${requiredFile} exists")

    try {
      file(requiredFile).getText()
    } catch (Exception e) {
      logger.error("ERROR: Could not open required file ${requiredFile}: ${e.getClass()}: ${e.getMessage()}")
      missingFiles.add(requiredFile)
    }
  }

  if (!missingFiles.isEmpty()) {
    throw new FileNotFoundException("One or more required files are missing")
  }
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"
      apply plugin: 'com.google.gms.google-services'
      apply plugin: 'com.google.firebase.crashlytics'

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
          useLibrary 'org.apache.http.legacy'
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        testOptions {
          execution 'ANDROIDX_TEST_ORCHESTRATOR'
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  apply plugin: "digital.wup.android-maven-publish"
  apply plugin: "signing"

  publishing {
    publications {
      basicJar(MavenPublication) {

        switch (POM_PACKAGING) {
          case "jar":
            from components.java
            break

          case "apk":
            break

          case "aar":
            from components.android
            break
        }

        artifact sourcesJar
        artifact javadocsJar

        pom {
          artifactId = POM_ARTIFACT_ID
          name = POM_NAME
          packaging = POM_PACKAGING
          description = POM_DESCRIPTION
          url = POM_URL

          scm {
            connection = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id = "io7m"
              name = "Mark Raynsford"
              email = "code@io7m.com"
              url = "https://www.io7m.com"
            }
            developer {
              id = "winniequinn"
              name = "Winnie Quinn"
              url = "https://www.winniequinn.com/"
            }
            developer {
              id = "gioneill"
              name = "Greg O'Neill"
              url = "https://github.com/gioneill"
            }
            developer {
              id = "mattniehoff"
              name = "Matt Niehoff"
              url = "https://github.com/mattniehoff"
            }
            developer {
              id = "MalcolmMcFly"
              name = "Malcolm Woods"
              url = "https://github.com/MalcolmMcFly"
            }
          }
        }
      }
    }

    repositories {
      maven {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

        credentials(PasswordCredentials) {
          username nexusUsername
          password nexusPassword
        }
      }
    }
  }

  signing {
    useGpgCmd()
    sign publishing.publications.basicJar
  }

  repositories {
    mavenLocal()
    mavenCentral()
    google()

    maven {
      url "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    maven {
      credentials {
        username findProperty("org.librarysimplified.nexus.username")
        password findProperty("org.librarysimplified.nexus.password")
      }
      url "https://nexus.librarysimplified.org:8443/nexus/content/groups/external/"
    }

    maven { url "https://jitpack.io" }
    jcenter()
    google()

    maven {
      url "http://maven.findawayworld.com/artifactory/libs-release/"
    }
  }
}

